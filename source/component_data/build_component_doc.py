
import os
from glob import glob

def reStSection(fi):
    '''Return a dictionary with key values of the object data table.
    '''

    dat = [line.split(";") for line in open(objData, 'r')][1:]

    out = {}
    for key,value in dat:
        key = key.strip()
        value = value.strip()
        out[key]=value

    return out


def reStSymbol(fi, img="png"):
    '''Retuns the reSt code for the component symbol
    '''

    # get bitmap file name
    filename = [line.split(";")[1].strip() for line in open(fi, 'r') if 'Bitmap' in line][0]

    string = ("Symbol\n"
              '""""""\n\n'
              ".. image:: _static/bitmap/%s.%s\n"
              "\n" %(filename, img) )

    return string


def reStCompData(fi):
    '''Retuns the reSt code for the component data
    '''

    skip=1 # header
    data = [line.strip() for line in open(fi, 'r')][skip:]
    data = [' '*3 + dat for dat in data]

    string = ("Component Data\n"
              '""""""""""""""\n\n'
              ".. csv-table:: Component Data\n"
              "   :header: Field, Value\n"
              "   :widths: 10, 10\n"
              "   :stub-columns: 1\n"
              "   :delim: ;\n"
              "\n" )

    string =string + "\n".join(data) + "\n"

    # ground no netlist, sphinx compains
    string = string.replace('````', '')

    return string


def reStCompProp(fi):
    '''Retuns the reSt code for the component property list
    '''
    props = [line.strip() for line in open(fi, 'r')]

    # no properties (just two line header) Ex. GND
    if len(props) == 2:
        return ""

    # skip header
    props = props[2:]
    props = [' '*3 + prop for prop in props]

    string =( "Component Parameters\n"
              '""""""""""""""""""""\n'
              "\n"
              ".. csv-table:: Default Parameters\n"
              "   :header: Name, Value, Display, Description\n"
              "   :widths: 4, 4, 4, 10\n"
              "   :delim: ;\n"
              "\n" )
    string =  string + "\n".join(props) + "\n"

    # the '-' becomes a two line bullet list
    string = string.replace('; "-"', '; \-')

    return string

# this is automate
noModify = (
"\n"
".. NOTE: This file was generated automatically, modifications will be lost on update\n"
"   source bitmaps in:    source/_static/bitmaps\n"
"   source data files in: source/component_data/\n"
"   generated by script:  source/component_data/build_component_doc.py\n\n")

# get list of categories as in Qucs
cat_file = "categories.txt"
categories = [line.strip() for line in open(cat_file, 'r')]


reSt = []

# add no modify note
reSt.append( noModify)

reSt.append(
  "Component Reference\n"
  "===================\n\n" )


total = 0

quick_reference =[]

for cat in categories:

    # skip diagrams
    if (cat == "diagrams"): break


    # Category
    cat = cat.title().translate(None,'"').strip()
    reSt.append( cat )
    reSt.append( '-'*len(cat) + "\n" )

    # load component list on this category, skip comments
    #component_list = os.path.join(cat, "comp_list.txt")
    #components =  [line.strip() for line in open(component_list, 'r') if "#" not in line]
    files = os.listdir(cat)
    data = glob(os.path.join(cat,'*data.csv'))
    prop = glob(os.path.join(cat,'*prop.csv'))

    print "Number of components in %s : %d " %(cat, len(data))
    total = total + len(data)

    for objData, objProp in zip(data,prop):

        # fech object data as a dictionary
        content = reStSection( objData )
        
        # _001lump
        label = os.path.basename( objData ).split("_")[0]+cat[:3]

        # Component Subsection
        #descr = content['Caption'].title().translate(None,'"').strip()
        descr = content['Caption'].title()
        reSt.append( '\n.. _%s:\n' %label ) # cross referece label
        reSt.append( descr )
        reSt.append( '^'*len(descr) + "\n" )

        # Symbol
        reSt.append( reStSymbol( objData ) )

        # Data
        reSt.append( reStCompData( objData ) )

        # Props
        reSt.append( reStCompProp( objProp) )

        # Section label, for crossreference
        #reSt.append("\n.. _ref-%s-label:\n" %(symbol))

        cap = content['Caption']
        sch = content['Schematic entry']
        net = content['Netlist entry'].replace('````', '') # gnd has no entry
        des = content['Description']
        if len(des) > 37:
            des = des[:37]+"..."

        # build quick reference table
        # add cross-reference    :ref:`displayed text <label>`
        quick_reference.append( "   :ref:`%s <%s>`; %s; %s; %s"
                           %(cap, label, sch, net, des) )



print "Total number of components: ", total

fo = open('../component_reference.rst', 'w')
for item in reSt:
  fo.write("%s\n" % item)
fo.close()



quick_header = []
quick_header.append( noModify )
quick_header.append(
  "Quick Reference\n"
  "===============\n\n"
  "The table below is a quick summary of the %i components currently available in Qucs.\n"
  "\n"
  ".. csv-table:: Schematic Entry Quick Reference\n"
  "   :header: Device, Schematic Entry, Netlist Entry, Description\n"
  "   :widths: 30, 15, 15, 40\n"
  "   :delim: ;\n\n" %(total) )

fo2 = open('../quick_reference.rst', 'w')
for item in quick_header:
  fo2.write("%s\n" % item)
for item in quick_reference:
  fo2.write("%s\n" % item)
fo2.close()
